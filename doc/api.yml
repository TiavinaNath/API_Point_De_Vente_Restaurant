openapi: 3.0.3
info:
  title: Ingredient & Dish Management API
  version: 1.0.0
  description: API for managing ingredients, dishes, stock movements, prices and orders.
servers:
  - url: http://localhost:8080
paths:
  /ingredients:
    get:
      summary: Get ingredients with optional price filters
      parameters:
        - in: query
          name: priceMinFilter
          schema:
            type: number
            format: double
        - in: query
          name: priceMaxFilter
          schema:
            type: number
            format: double
      responses:
        '200':
          description: List of ingredients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IngredientRest'
        '400':
          description: Invalid query parameters
        '500':
          description: Internal server error
  /ingredients/{ingredientId}/prices:
    put:
      summary: Update prices for an ingredient
      parameters:
        - in: path
          name: ingredientId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateIngredientPrice'
      responses:
        '200':
          description: Updated ingredient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientRest'
        '400':
          description: Invalid input
        '404':
          description: Ingredient not found
        '500':
          description: Internal server error
  /ingredients/{ingredientId}/stockMovements:
    put:
      summary: Update stock movements for an ingredient
      parameters:
        - in: path
          name: ingredientId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateIngredientStockMovement'
      responses:
        '200':
          description: Updated ingredient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientRest'
        '400':
          description: Invalid input
        '404':
          description: Ingredient not found
        '500':
          description: Internal server error
  /dishes:
    get:
      summary: Get all dishes with optional pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: pageSize
          schema:
            type: integer
      responses:
        '200':
          description: List of dishes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DishRest'
        '400':
          description: Invalid pagination parameters
        '500':
          description: Internal server error
  /dishes/{dishId}/ingredients:
    put:
      summary: Update ingredients of a dish
      parameters:
        - in: path
          name: dishId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateDishIngredient'
      responses:
        '200':
          description: Updated dish
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DishRest'
        '400':
          description: Invalid input
        '404':
          description: Dish not found
        '500':
          description: Internal server error
  /orders/{reference}:
    get:
      summary: Get order by reference
      parameters:
        - in: path
          name: reference
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderRest'
        '404':
          description: Order not found
        '500':
          description: Internal server error
  /orders/{reference}/dishes:
    put:
      summary: Update an order's dishes and optionally confirm it
      parameters:
        - in: path
          name: reference
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrder'
      responses:
        '200':
          description: Updated order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderRest'
        '400':
          description: Invalid input
        '404':
          description: Order not found
        '500':
          description: Internal server error
  /orders/{reference}/dishes/{dishId}:
    put:
      summary: Update the status of a dish in an order
      parameters:
        - in: path
          name: reference
          required: true
          schema:
            type: string
        - in: path
          name: dishId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Updated order with updated dish status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderRest'
        '404':
          description: Order or dish not found
        '500':
          description: Internal server error
components:
  schemas:
    IngredientRest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        actualPrice:
          type: number
          format: double
        availableQuantity:
          type: number
          format: double
        prices:
          type: array
          items:
            $ref: '#/components/schemas/PriceRest'
        stockMovements:
          type: array
          items:
            $ref: '#/components/schemas/StockMovementRest'
    CreateIngredientPrice:
      type: object
      properties:
        amount:
          type: number
          format: double
        dateValue:
          type: string
          format: date
    CreateIngredientStockMovement:
      type: object
      properties:
        quantity:
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/Unit'
        movementType:
          $ref: '#/components/schemas/StockMovementType'
    DishRest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        actualPrice:
          type: number
          format: double
        availableQuantity:
          type: number
          format: double
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/DishIngredientRest'
    CreateDishIngredient:
      type: object
      properties:
        name:
          type: string
        requiredQuantity:
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/Unit'
    DishIngredientRest:
      type: object
      properties:
        ingredient:
          $ref: '#/components/schemas/IngredientBasicProperty'
        requiredQuantity:
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/Unit'
    IngredientBasicProperty:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        actualPrice:
          type: number
          format: double
        availableQuantity:
          type: number
          format: double
    OrderRest:
      type: object
      properties:
        id:
          type: integer
        reference:
          type: string
        dishOrders:
          type: array
          items:
            $ref: '#/components/schemas/DishOrderRest'
        actualStatus:
          $ref: '#/components/schemas/StatusOrder'
    DishOrderRest:
      type: object
      properties:
        id:
          type: integer
        dish:
          $ref: '#/components/schemas/DishBasicProperty'
        quantity:
          type: number
        actualStatus:
          $ref: '#/components/schemas/StatusDishOrder'
    UpdateOrder:
      type: object
      properties:
        dishOrders:
          type: array
          items:
            $ref: '#/components/schemas/UpdateOrderDishOrder'
        statusOrder:
          $ref: '#/components/schemas/StatusOrder'
    UpdateOrderDishOrder:
      type: object
      properties:
        dishName:
          type: string
        quantity:
          type: number
          format: double
    DishBasicProperty:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        actualPrice:
          type: number
          format: double
    PriceRest:
      type: object
      properties:
        id:
          type: integer
        price:
          type: number
        dateValue:
          type: string
          format: date
    StockMovementRest:
      type: object
      properties:
        id:
          type: integer
        quantity:
          type: number
        unit:
          $ref: '#/components/schemas/Unit'
        type:
          $ref: '#/components/schemas/StockMovementType'
        creationDatetime:
          type: string
          format: date-time
    Unit:
      type: string
      enum: [G, U, L]
    StockMovementType:
      type: string
      enum: [IN, OUT]
    StatusOrder:
      type: string
      enum: [CREATED, CONFIRMED, IN_PROGRESS, FINISHED, DELIVERED]
    StatusDishOrder:
      type: string
      enum: [CREATED, CONFIRMED, IN_PROGRESS, FINISHED, DELIVERED]
